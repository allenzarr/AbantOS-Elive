Chapter six
The point where the kernel starts its first user-space, init is significant because that’s where the memory and CPU are finally ready for normal system operation and is where you can see how the rest of the system builds up as a whole
User Space starts in roughly this order:
1.init
2.essential low-level services such as udevd and syslogd
3. network configuration
4. Mid-and high- level service (cron, printing, and so on). Login prompts, GUIs and other high-level applications.
Introduction to init
The init program is a user-space program like any other program on the linux system, and you’ll find it in /sbin along with many of the other system binaries. It main purpose is to start and stop the initial service processes on the system, but new versions have more responsibilities.
There are three major implementation of init in linux distributions
1.	System v init A traditional squenced init, not in common use on recent system
2.	System The standard init for all mainstream linux system distributions
3.	Upstart The init on ubuntu installations prior to version 15.04
 There are many different implementations of init because system V init and other older version relied on a sequence that performed only one startup task at a time. Performance isn’t terrible good because two parts of the boot sequence cannot normally run at once. Anthoner limitation is that you can only start a fixed set of series as defined by the boot sequence.
Systemd and upstart attempt to remedy the performance issue by allowing many service to start in parallel thereby speeding up the boot process. 
There implementations are quite different, though; system is goal oriented. You define a target that you want to achieve, along with its dependencies, and when you want to reach the target.
upstart  is reactionary. It receive events and, based on those events, runs jobs that can in turn produce more events, causing upstart to run more jobs, and so on.
System v init spript tend to contain many similar command designed to start, stop, and restart services. 
Finally, system and upstart both offer some level of on-demand service, rather than trying to start all the services that may be necessary at boot time Cas the system v init would do) they start some service only when needed.
System V Runlevels
At any given time on a linux system, a certain base of processes(Such as crond and udevd) is called its runlevel, which is denoted by a number from 0 through 6.
You can chec your system’s runlevel with the who-I command. A system running upstart responds with something like this:
$who-r
Ren-level 2 2015 -09-06 8:37.
This output tells us that the current runlevel is 2, as well as the date and time that the runlevel was established.
Runlevel serve various purposes, but the most common one is to distinguish between system startup, shut down, single-user mode, and console mode states.
Systemd
The system init is one of the newest init implementations on linux. In addition to handling the regular boot process, system aims in incorporate number of standard unix services such as cron and inetd. One of its most significant features is its ability to defer the start of services and operating system features until they are necessary. 
One of the most interesting things about system is that it does not just operate processes and services, it can also mount filesystem, monitor network socket, run timers, and more. /each type of capability is called a unit when you turn on a unit, you activate it.
System Dependency
Boot-time and operational dependencies are more complicated than may seem at first because strict dependencies are too inflexitble.
Ordering
None of the dependency syntax that you’ve seen so far explicitly specifies order. By default, activating a unit with a require or wants causes sytemd to activate all of these dependencies at the same time as the first unit. This is optional, because you want to start as many services as possible as quickly as possible to reduce boot time.
system configuration file are spread among many directories across the system. There are two main directories for system configuration; the system unit directory (globally configured, usually /usr/lib/ system/system and a system configuration directory (local definitions, usually /etc/system/system.
You can check the current system configuration search parth (including precedence) with this command:
#systemctl-p unit path show
To see the system unit and configuration directories on your system, use the following commands:
$pkg-config system – variable= systemdsystemdir
$pkg-config system –variable =systemdsystemconfdir.

Systemd operation
You’ll interact with system primarily through the systemctl command, which allow you to activate and deactivate services, list status, reload the configuration , and much more.
The most essential basic command deal with obtaining unit information. For example, to view a list of active units on your system, issue a list- units command (This is actually the default command for systemctl, so you don’t really need the list -units part.
Systmct1 list-units
 The output format is typical of a unix information- listing command. For example, the header and the line for media. Mount would look like this.
Unit    load active sub job description.
Boot optimization with Auxiliary units
A common style of unit activation in system attempts to simplify dependency order and speed up boot time. It’s similar to on-demand startup in that a service unit and an auxiliary unit represent the service unit as soon as it active the auxiliary unit .
The reasoning behind this scheme is that essential boot-time service units such as syslog and dbus take some time to start, and many other units depend on them.
Upstart.
The upstart version of units revolve around job and events. Jobs are startup and runtime actions for upstart to perform (such as system service and configuration); and events are messages that upstart receives from itself or other processes (such as udevd). Upstart workds by starting jobs in response to events.
Upstart initialization procedure
Upon startupk upstart does the following
1.	Loads its configuration and the job configuration files in /etc/init
2.	Emit the startup event
3.	Runs jobs configured to start upon receiving the startup event
4.	These initial jobs emit their own events triggering more jobs and events.

Upstart operation
To start an upstart job, use initial start:
#initctl start job
To stop a job, use initctl stop
#inictl stop job
To restart a job
#inictl restart job
If you need to emit an event to upstart, you can do it manually with #initctl emit event.
You can also add environment variable to the emitted event by adding key=vale parameter after event.
The initial RAM filesystem.
The linux boot process is for most part, fairly straight forward. However one component has always been somewhat confounding: init ramfs or the initial RAM filesystem.
The problem stems from the availablility of many different kinds of storage hardware. Remember, the linux kernel does not talk to the pc BIOS or EFI interfaces to get data from disks, so in order to mount its root filesystem, it needs driver support for the underlying storage mechanism. 
The workaround is to gather a small collection of kernel driver modules along with a few other utilities into an archive. The boot loader load this archive into memory before running the kernel. Upon start, the kernel reads the contents of the archive into a temporary RAM filesystem (the initramfs), mount it at /, and perform the user-mode handoff to the init on the init on the initramfs. Then, the utilities included in the initarmfs allow the….





